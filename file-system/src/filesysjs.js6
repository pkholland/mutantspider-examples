/*
 *  filesysjs.js6
 *
 *  javascript api into the filesys library
 *
 */

import * as filesys_bind from 'filesys-bind';
import * as ms_loader from 'mutantspider-loader';

// private, "singleton" helper class to load and interface with
// the filesys library (the thing that is generated by compiling
// file_system.cpp).
class filesys {

  constructor() {

    this.asmjs_id = -1;
    this.json_filesys_exports = {};
    this.modules = {};

    // functions that can be called from the asm/pexe/worker to here
    this.callbacks = {

      // called from both filesys.js and filesys.pexe when
      // either of those components have finished initializing
      ms_async_startup_complete: (mod_id) => {

        // since there is no api into filesys (it automatically runs
        // its internal testing code when it finishes initializing)
        // we don't care too much about what happens here.

      },

      // called when a component fails to load
      ms_async_startup_failed: (mod_id, reason) => {
        console.error('startup failed: ' + reason);
      },

      // called when a component fails during runtime
      ms_error: (reason) => {
        console.error('component error: ' + reason);
      },

      // called when a pexe component fails during runtime
      ms_crash(reason) {
        console.error('component crash: ' + reason);
      },

      fs_postMsg(msg) {
        if (this.watcher)
          this.watcher(msg);
      }

    };

    let submodules = [];
    if (navigator.mimeTypes['application/x-pnacl'])
      submodules.push(filesys_bind.submodules[1]);
    else
      submodules.push(filesys_bind.submodules[0]);

    ms_loader.load_modules(submodules, (info) => {

      this.modules[info.mod_id] = { type: info.submodule.type, module: info.module };
      if (info.submodule.type === 'asmjs-direct') {
        info.module.__ms_c_to_js_api__ = this.callbacks;
        filesys_bind.bind(this.callbacks, info.module, this);
        this.asmjs_id = info.mod_id;
        this.modules[info.mod_id].js_module_name = info.submodule.asm_js_module_name;
        window[info.submodule.asm_js_module_name](info.module);
      } else {
        filesys_bind.bind(this.callbacks, info.module, this);
      }

    });

  }

};

var _fs;

export function filesys_watch(watcher) {
  if (!_fs)
    _fs = new filesys();
  _fs.watcher = watcher;
}

